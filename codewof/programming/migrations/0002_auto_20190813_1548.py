# Generated by Django 2.1.5 on 2019-08-13 03:48

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('programming', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('points', models.IntegerField(default=0)),
                ('goal', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
                ('slug', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=100)),
                ('question_text', models.TextField()),
                ('solution', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
                ('number', models.PositiveSmallIntegerField(default=1)),
                ('expected_output', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestCaseAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField()),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programming.Attempt')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTypeDebugging',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.Question')),
                ('initial_code', models.TextField()),
                ('read_only_lines_top', models.PositiveSmallIntegerField(default=0)),
                ('read_only_lines_bottom', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Debugging Problem Question',
            },
            bases=('programming.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeDebuggingTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.TestCase')),
                ('test_code', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='programming.QuestionTypeDebugging')),
            ],
            options={
                'verbose_name': 'Debugging Problem Question Test Case',
            },
            bases=('programming.testcase',),
        ),
        migrations.CreateModel(
            name='QuestionTypeFunction',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.Question')),
            ],
            options={
                'verbose_name': 'Function Question',
                'verbose_name_plural': 'Function Questions',
            },
            bases=('programming.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeFunctionTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.TestCase')),
                ('test_code', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='programming.QuestionTypeFunction')),
            ],
            options={
                'verbose_name': 'Function Question Test Case',
            },
            bases=('programming.testcase',),
        ),
        migrations.CreateModel(
            name='QuestionTypeParsons',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.Question')),
                ('lines', models.TextField()),
            ],
            options={
                'verbose_name': 'Parsons Problem Question',
            },
            bases=('programming.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeParsonsTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.TestCase')),
                ('test_code', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='programming.QuestionTypeParsons')),
            ],
            options={
                'verbose_name': 'Parsons Problem Question Test Case',
            },
            bases=('programming.testcase',),
        ),
        migrations.CreateModel(
            name='QuestionTypeProgram',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.Question')),
            ],
            options={
                'verbose_name': 'Program Question',
                'verbose_name_plural': 'Program Questions',
            },
            bases=('programming.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeProgramTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='programming.TestCase')),
                ('test_input', models.CharField(blank=True, max_length=500)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='programming.QuestionTypeProgram')),
            ],
            options={
                'verbose_name': 'Program Question Test Case',
            },
            bases=('programming.testcase',),
        ),
        migrations.AddField(
            model_name='testcaseattempt',
            name='test_case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programming.TestCase'),
        ),
        migrations.AddField(
            model_name='attempt',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programming.Profile'),
        ),
        migrations.AddField(
            model_name='attempt',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='programming.Question'),
        ),
        migrations.AddField(
            model_name='attempt',
            name='test_cases',
            field=models.ManyToManyField(through='programming.TestCaseAttempt', to='programming.TestCase'),
        ),
    ]
